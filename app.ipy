{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "82e2acd4-5838-45a5-9a9c-9dced0463355",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Load Dataset\n",
    "@st.cache\n",
    "def load_data():\n",
    "    file_path = \"E:/DS PROJECT/World_development_mesurement (1).xlsx\"  # Update this path\n",
    "    data = pd.read_excel(file_path)\n",
    "    return data\n",
    "\n",
    "# Preprocessing Function\n",
    "def preprocess_data(data):\n",
    "    numeric_columns = data.select_dtypes(include=['number']).columns\n",
    "    scaler = StandardScaler()\n",
    "    data_scaled = scaler.fit_transform(data[numeric_columns])\n",
    "    return data_scaled, numeric_columns\n",
    "\n",
    "# Clustering Function\n",
    "def perform_clustering(data_scaled, n_clusters):\n",
    "    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n",
    "    clusters = kmeans.fit_predict(data_scaled)\n",
    "    return kmeans, clusters\n",
    "\n",
    "# Streamlit App\n",
    "def main():\n",
    "    st.title(\"Clustering Application\")\n",
    "    st.write(\"Analyze global development metrics using clustering.\")\n",
    "\n",
    "    # Load data\n",
    "    data = load_data()\n",
    "    st.write(\"### Dataset Preview\")\n",
    "    st.dataframe(data.head())\n",
    "\n",
    "    # Preprocess data\n",
    "    data_scaled, numeric_columns = preprocess_data(data)\n",
    "\n",
    "    # User Input: Number of Clusters\n",
    "    n_clusters = st.slider(\"Select Number of Clusters\", min_value=2, max_value=10, value=3, step=1)\n",
    "\n",
    "    # Perform Clustering\n",
    "    kmeans, clusters = perform_clustering(data_scaled, n_clusters)\n",
    "\n",
    "    # Add Cluster Labels to Data\n",
    "    data['Cluster'] = clusters\n",
    "    st.write(\"### Clustered Data\")\n",
    "    st.dataframe(data)\n",
    "\n",
    "    # Visualize Clusters\n",
    "    st.write(\"### Cluster Visualization\")\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    plt.scatter(data_scaled[:, 0], data_scaled[:, 1], c=clusters, cmap='viridis', alpha=0.7)\n",
    "    plt.title(f'K-Means Clustering with {n_clusters} Clusters')\n",
    "    plt.xlabel(numeric_columns[0])\n",
    "    plt.ylabel(numeric_columns[1])\n",
    "    st.pyplot(plt)\n",
    "\n",
    "    # Cluster Distribution\n",
    "    st.write(\"### Cluster Distribution\")\n",
    "    st.bar_chart(data['Cluster'].value_counts())\n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d57a3c8d-6614-42b5-9240-5f79d841190a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
